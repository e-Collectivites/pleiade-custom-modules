<?php

namespace Drupal\datatable_pleiade\Controller;

use Drupal\Core\Controller\ControllerBase;
use Symfony\Component\HttpFoundation\JsonResponse;
use GuzzleHttp\Client;
use GuzzleHttp\Exception\RequestException;
use Symfony\Component\HttpFoundation\Request;
use Drupal\module_api_pleiade\ApiPleiadeManager;


class DatatableController extends ControllerBase
{

    public function documents_recents(Request $request)
    {
        $tempstoreGroup = \Drupal::service('tempstore.private')->get('api_lemon_pleiade');
        $storedGroups = $tempstoreGroup->get('groups');
        if (is_string($storedGroups) && strpos($storedGroups, 'pastell') !== false) {

            $formattedData['docs'] = [];

            $tempstore = \Drupal::service('tempstore.private')->get('api_pastell_pleiade');
            $tempstore->delete('documents_pastell');
            $return1 = []; //our variable to fill with data returned by Pastell
            // Our collectivite ID for Pastell id_e is sent as param by our js module
            $id_e = $request->query->get('id_e');
            // check value exists and is numleric
            if (null !== $id_e && is_numeric($id_e)) {
                \Drupal::logger('api_pastell_documents')->info('function search Pastell Docs with id_e : ' . $id_e);
                $dataApi = new ApiPleiadeManager();
                $return1 = $dataApi->searchMyDocs($id_e);
                $return2 = $dataApi->searchMyFlux();
                // var_dump(gettype($return1));
                if($return1){
                    foreach ($return1 as &$document) {
                        if (isset($return2[$document['type']]['nom'])) {
                            // Remplacer le type par le nom associé
                            $document['type'] = $return2[$document['type']]['nom'];
                        }
                    }
                    $tempstore = \Drupal::service('tempstore.private')->get('api_pastell_pleiade');
                    $tempstore->set('documents_pastell', $return1);
                } else {
                    $return1 = [];                   
                }

            } else {
                $return1 = [];
                
            }
            $formattedData['docs'] = array_merge($formattedData['docs'], $return1);
        }
        $nextcloudataApi = new ApiPleiadeManager();
        $return_nc = $nextcloudataApi->getNextcloudNotifs();
	$tempstore = \Drupal::service('tempstore.private')->get('api_nextcloud_pleiade');
        $tempstore->set('documents_nextcloud', $return_nc);
        if($return_nc){
            if ($return_nc->ocs->data) {

                $data = $return_nc->ocs->data; // Access the 'data' property of the object
                if($data){
                    foreach ($data as $item) {
                        if (!isset($item->subjectRichParameters->file)) {
                            continue; // Skip the iteration if 'file' is not present
                        }

                        $status = '';
                        if (strpos($item->subject, 'modif') !== false) {
                            $status = 'Modifié';
                        } elseif (strpos($item->subject, 'partag') !== false) {
                            $status = 'Partagé';
                        }

                        $fileUrl = isset($item->subjectRichParameters->file->link) ? $item->subjectRichParameters->file->link : null;
                        $fileName = isset($item->subjectRichParameters->file->name) ? $item->subjectRichParameters->file->name : null;

                        $formattedItem = [
                            'type' => 'Nextcloud',
                            'titre' => $fileName,
                            'creation' => date('d/m/Y H:i', strtotime($item->datetime)),
                            // 'subject' => $item->subject,
                            'status' => $status,
                            'fileUrl' => $fileUrl
                        ];
                        $formattedItems[] = $formattedItem;
                    }
		
                    if($formattedItems !== null && $formattedData['docs'] !== null){
                    $formattedData['docs'] = array_merge($formattedData['docs'], $formattedItems);
                    }
		    else{
			$formattedData['docs'] = $formattedItems;
			}
                }
                
            } else {
                $formattedItems = [];
                
            }
        
        }
        // $formattedData['error'] = $error_count;
        $jsonData = json_encode($formattedData); 
        
        if ($jsonData !== 'null' ) {
            return new JsonResponse($jsonData, 200, [], true);
        } else {
            return new JsonResponse('0', 200, [], true);

        }
    }

}
