<?php

function notification_module_pleiade_install()
{
  $existing_type = \Drupal\node\Entity\NodeType::load('notification');

  if (!$existing_type) {
    // Le type de contenu n'existe pas, le créer.
    $news_type = \Drupal\node\Entity\NodeType::create([
      'type' => 'notification',
      'name' => 'Notifications',
      'description' => 'Type de contenu pour les notifications à afficher dans la cloche.',
      'display_submitted' => TRUE,
      'preview_mode' => 'default',
      'help' => '',
    ]);
    $news_type->save();

    // Ajouter un champ 'description'.
    $field_description_storage = \Drupal\field\Entity\FieldStorageConfig::create([
      'field_name' => 'field_description',
      'entity_type' => 'node',
      'type' => 'text_long',
    ]);
    $field_description_storage->save();

    $field_description_instance = \Drupal\field\Entity\FieldConfig::create([
      'field_storage' => $field_description_storage,
      'bundle' => 'notification',
      'label' => 'Description',
      'required' => TRUE,
      // Spécifier le format de texte complet HTML.
      'settings' => [
        'text_processing' => 0,
      ],
    ]);
    $field_description_instance->save();

    // Ajouter un champ supplémentaire si nécessaire.
    $field_nom_storage = \Drupal\field\Entity\FieldStorageConfig::create([
      'field_name' => 'field_nom_applicatif',
      'entity_type' => 'node',
      'type' => 'text',
    ]);
    $field_nom_storage->save();

    $field_nom_instance = \Drupal\field\Entity\FieldConfig::create([
      'field_storage' => $field_nom_storage,
      'bundle' => 'notification',
      'label' => 'Nom de l\'applicatif',
      'required' => FALSE,
    ]);
    $field_nom_instance->save();

    // Activer les champs sur le formulaire d'affichage du type de contenu.
    $entity_display_repository = \Drupal::service('entity_display.repository');
    $form_display = $entity_display_repository->getFormDisplay('node', 'notification', 'default');

    // Activer l'affichage du champ 'field_description'.
    $form_display->setComponent('field_description', ['type' => 'text_textarea']);

    // Activer l'affichage du champ 'field_nom_applicatif'.
    $form_display->setComponent('field_nom_applicatif', ['type' => 'text_textfield']);

    $form_display->save();
    // Vider le cache pour appliquer les changements.
    drupal_flush_all_caches();
  }
}

/**
 * Implements hook_uninstall().
 */
function notification_module_pleiade_uninstall()
{
  // Delete all nodes of type 'notification'.
  $query = \Drupal::entityQuery('node')
    ->condition('type', 'notification')
    ->accessCheck(TRUE);
  $nids = $query->execute();
  $query = \Drupal::entityQuery('node')
    ->condition('type', 'notification')
    ->accessCheck(FALSE); // Disable access checks for uninstallation.
  $nids = $query->execute();

  foreach ($nids as $nid) {
    $node = \Drupal\node\Entity\Node::load($nid);
    if ($node) {
      $node->delete();
    }
  }

  // Check if the field exists before attempting to delete it.
  if ($field_description = \Drupal\field\Entity\FieldStorageConfig::loadByName('node', 'field_description')) {
    $field_description->delete();
  }

  if ($field_image = \Drupal\field\Entity\FieldStorageConfig::loadByName('node', 'field_nom_applicatif')) {
    $field_image->delete();
  }

  // Delete the type of content.
  if ($node_type = \Drupal::entityTypeManager()->getStorage('node_type')->load('notification')) {
    $node_type->delete();
  }

  // Clear the cache to apply the changes.
  \Drupal::entityTypeManager()->clearCachedDefinitions();
  // Cache la configuration pour que les changements prennent effet.
  drupal_flush_all_caches();
}

